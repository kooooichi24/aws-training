service: project
frameworkVersion: "2.72.3"

plugins:
  - serverless-prune-plugin
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-layers
  - serverless-plugin-aws-alerts
  - serverless-plugin-log-subscription

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, self:custom:defaultStage, 'local'}
  region: ap-northeast-1
  profile: sls-test
  deploymentBucket:
    name: furu-sls-deployment-bucket-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan
          Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TODO_TABLE}
  environment:
    DYNAMODB_TODO_TABLE: ${self:service}-dynamodb-todo-table-${self:provider.stage}
    STAGE: ${self:provider.stage}

functions:
  createTodo:
    handler: handler.createTodo
    events:
      - http:
          path: /api/v1/todo
          method: post
  getTodos:
    handler: handler.getTodos
    events:
      - http:
          path: /api/v1/todo
          method: get
  logsProcessor:
    handler: handler.logsProcessor
    logSubscription: false

resources:
  Resources:
    TodoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TODO_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PROVISIONED
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    ##################
    # SNS -> Slack
    ##################
    Chatbot:
      Type: AWS::Chatbot::SlackChannelConfiguration
      Properties:
        ConfigurationName: ${self:service}-chatbot-${self:provider.stage}
        IamRoleArn: !GetAtt ChatbotIamRole.Arn
        SlackChannelId: C034H91QVMZ # 環境ごとに通知するチャンネルを動的に変更したい
        SlackWorkspaceId: T034H75DE7L
        SnsTopicArns:
          - arn:aws:sns:${self:provider.region}:${aws:accountId}:${self:service}-${self:provider.stage}-alerts-ok
          - arn:aws:sns:${self:provider.region}:${aws:accountId}:${self:service}-${self:provider.stage}-alerts-alarm
          - arn:aws:sns:${self:provider.region}:${aws:accountId}:${self:service}-${self:provider.stage}-alerts-insufficientData

    ChatbotIamRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: chatbot-iam-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: chatbot.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: chatbot-iam-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - cloudwatch:Describe*
                    - cloudwatch:Get*
                    - cloudwatch:List*
                  Resource:
                    - "*"

custom:
  defaultStage: local
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      migrate: true
      noStart: true
  prune:
    automatic: true
    number: 3
  serverless-layers:
    compatibleRuntimes: ["nodejs14.x"]
  alerts:
    stages:
      - dev
    dashboard: true
    topics:
      ok: ${self:service}-${self:provider.stage}-alerts-ok
      alarm: ${self:service}-${self:provider.stage}-alerts-alarm
      insufficientData: ${self:service}-${self:provider.stage}-alerts-insufficientData
    alarms:
      - functionThrottles
      - functionErrors
      - functionInvocations
      - functionDuration
  logSubscription:
    enabled: true
    destinationArn: !GetAtt LogsProcessorLambdaFunction.Arn
    addLambdaPermission: true
    filterPattern: "?ERROR ?WARN"
